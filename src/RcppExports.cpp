// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/fastcpd.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fastcpd_impl
Rcpp::List fastcpd_impl(arma::mat const& data, double const beta, std::string const& cost_adjustment, int const segment_count, double const trim, double const momentum_coef, Rcpp::Nullable<Rcpp::Function> const& multiple_epochs_function, std::string const& family, double const epsilon, int const p, arma::colvec const& order, Rcpp::Nullable<Rcpp::Function> const& cost_pelt, Rcpp::Nullable<Rcpp::Function> const& cost_sen, Rcpp::Nullable<Rcpp::Function> const& cost_gradient, Rcpp::Nullable<Rcpp::Function> const& cost_hessian, bool const cp_only, double const vanilla_percentage, bool const warm_start, arma::colvec const& lower, arma::colvec const& upper, arma::colvec const& line_search, arma::mat const& variance_estimate, unsigned int const p_response, double const pruning_coef, bool const r_progress);
RcppExport SEXP _fastcpd_fastcpd_impl(SEXP dataSEXP, SEXP betaSEXP, SEXP cost_adjustmentSEXP, SEXP segment_countSEXP, SEXP trimSEXP, SEXP momentum_coefSEXP, SEXP multiple_epochs_functionSEXP, SEXP familySEXP, SEXP epsilonSEXP, SEXP pSEXP, SEXP orderSEXP, SEXP cost_peltSEXP, SEXP cost_senSEXP, SEXP cost_gradientSEXP, SEXP cost_hessianSEXP, SEXP cp_onlySEXP, SEXP vanilla_percentageSEXP, SEXP warm_startSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP line_searchSEXP, SEXP variance_estimateSEXP, SEXP p_responseSEXP, SEXP pruning_coefSEXP, SEXP r_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double const >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type cost_adjustment(cost_adjustmentSEXP);
    Rcpp::traits::input_parameter< int const >::type segment_count(segment_countSEXP);
    Rcpp::traits::input_parameter< double const >::type trim(trimSEXP);
    Rcpp::traits::input_parameter< double const >::type momentum_coef(momentum_coefSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::Function> const& >::type multiple_epochs_function(multiple_epochs_functionSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type family(familySEXP);
    Rcpp::traits::input_parameter< double const >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int const >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::colvec const& >::type order(orderSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::Function> const& >::type cost_pelt(cost_peltSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::Function> const& >::type cost_sen(cost_senSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::Function> const& >::type cost_gradient(cost_gradientSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::Function> const& >::type cost_hessian(cost_hessianSEXP);
    Rcpp::traits::input_parameter< bool const >::type cp_only(cp_onlySEXP);
    Rcpp::traits::input_parameter< double const >::type vanilla_percentage(vanilla_percentageSEXP);
    Rcpp::traits::input_parameter< bool const >::type warm_start(warm_startSEXP);
    Rcpp::traits::input_parameter< arma::colvec const& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::colvec const& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< arma::colvec const& >::type line_search(line_searchSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type variance_estimate(variance_estimateSEXP);
    Rcpp::traits::input_parameter< unsigned int const >::type p_response(p_responseSEXP);
    Rcpp::traits::input_parameter< double const >::type pruning_coef(pruning_coefSEXP);
    Rcpp::traits::input_parameter< bool const >::type r_progress(r_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(fastcpd_impl(data, beta, cost_adjustment, segment_count, trim, momentum_coef, multiple_epochs_function, family, epsilon, p, order, cost_pelt, cost_sen, cost_gradient, cost_hessian, cp_only, vanilla_percentage, warm_start, lower, upper, line_search, variance_estimate, p_response, pruning_coef, r_progress));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_fastcpd_fastcpd_impl", (DL_FUNC) &_fastcpd_fastcpd_impl, 25},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastcpd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
